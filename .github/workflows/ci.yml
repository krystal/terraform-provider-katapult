---
name: CI
on: [push]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55
        env:
          VERBOSE: "true"

  ## TODO: Enable when this issue is resolved:
  ##       https://github.com/bflad/tfproviderlint/issues/255
  # lint-provider:
  #   name: Lint Provider
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.21
  #     - uses: actions/cache@v3
  #       with:
  #         path: ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #     - name: Run tfproviderlint
  #       run: make lint-provider

  tidy:
    name: Tidy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Check if mods are tidy
        run: make check-tidy

  test:
    name: Acceptance Test (VCR Replay)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform_version:
          - "" # latest
          - "1.6.6"
          - "1.5.7"
          - "1.4.7"
          - "1.3.10"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}
          terraform_wrapper: false
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run tests
        run: make testacc
        env:
          VERBOSE: "true"
          VCR: "replay"
          KATAPULT_API_KEY: ${{ secrets.KATAPULT_API_KEY }}
          KATAPULT_ORGANIZATION: ${{ secrets.KATAPULT_ORGANIZATION }}
          KATAPULT_DATA_CENTER: ${{ secrets.KATAPULT_DATA_CENTER }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Validate documentation
        run: make check-docs
      - name: Ensure generated documentation is up to date
        run: mv docs docs-current && make docs && diff -rN docs-current docs

  release-please:
    needs: [lint, tidy, test, docs]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release-please
        with:
          command: manifest
      - if: ${{ steps.release-please.outputs.release_created }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - if: ${{ steps.release-please.outputs.release_created }}
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - if: ${{ steps.release-please.outputs.release_created }}
        name: Import GPG key
        id: import_gpg
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: "${{ secrets.GPG_PRIVATE_KEY }}"
          PASSPHRASE: "${{ secrets.PASSPHRASE }}"
      - if: ${{ steps.release-please.outputs.release_created }}
        name: goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GPG_FINGERPRINT: "${{ steps.import_gpg.outputs.fingerprint }}"
